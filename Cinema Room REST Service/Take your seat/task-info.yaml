type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/beans/SeatsDTO.java
  visible: true
  text: |
    package cinema.beans;

    import java.util.List;

    public class SeatsDTO {
       public int getTotal_rows() {
          return total_rows;
       }

       public void setTotal_rows(int total_rows) {
          this.total_rows = total_rows;
       }

       public int getTotal_columns() {
          return total_columns;
       }

       public void setTotal_columns(int total_columns) {
          this.total_columns = total_columns;
       }

       public List<AvailableSeats> getAvailable_seats() {
          return available_seats;
       }

       public void setAvailable_seats(List<AvailableSeats> available_seats) {
          this.available_seats = available_seats;
       }

       private int total_rows;
       private int total_columns;
       private List<AvailableSeats> available_seats;
    }
  learner_created: true
- name: src/cinema/beans/Seat.java
  visible: true
  text: |
    package cinema.beans;

    public class AvailableSeats{
        public AvailableSeats(int row,int column){
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        private int row;
        private int column;
    }
  learner_created: true
- name: src/cinema/services/SeatService.java
  visible: true
  learner_created: true
- name: src/cinema/services/impl/SeatServiceImpl.java
  visible: true
  learner_created: true
- name: src/cinema/controllers/SeatController.java
  visible: true
  text: |
    package cinema;

    import cinema.beans.AvailableSeats;
    import cinema.beans.SeatsDTO;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.ArrayList;
    import java.util.List;

    @RestController
    public class SeatController {
        private int rows = 9;
        private int columns = 9;

        @GetMapping("/seats")
        public SeatsDTO getSeats(){
            return populateSeats();
        }

        private SeatsDTO populateSeats() {
            SeatsDTO seatsDTO = new SeatsDTO();
            seatsDTO.setTotal_columns(columns);
            seatsDTO.setTotal_rows(rows);
            int totAvlSeats = rows;
            List<AvailableSeats> avlSeats = new ArrayList<AvailableSeats>();
            int r = rows;
            while (r != 0) {
                int c = columns;
                while (c != 0) {
                    avlSeats.add(new AvailableSeats(r, c));
                    c--;
                }
                r--;
            }
            seatsDTO.setAvailable_seats(avlSeats);
            return seatsDTO;
        }
    }
  learner_created: true
- name: src/cinema/validator/SeatDataValidator.java
  visible: true
  learner_created: true
- name: src/cinema/beans/BookedTicket.java
  visible: true
  learner_created: true
- name: src/cinema/beans/TicketDetails.java
  visible: true
  learner_created: true
- name: src/cinema/AppConfig.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/946/implement#comment
status: Failed
feedback:
  message: |-
    Wrong answer in test #3

    The JSON object shouldn&#39;t have the key &quot;ticket&quot;

    Full JSON:
    {
      &quot;ticket&quot;: {
        &quot;row&quot;: 1,
        &quot;column&quot;: 1,
        &quot;price&quot;: 10
      }
    }

    Please find below the output of your program during this failed test.

    ---

    .   ____          _            __ _ _
     /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \
     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      &#39;  |____| .__|_| |_|_| |_\__, | / / / /
     =========|_|==============|___/=/_/_/_/
     :: Spring Boot ::        (v2.3.1.RELEASE)

    2021-09-14 00:42:45.513  INFO 661 --- [    Test worker] cinema.Main                              : Starting Main on AMAC02CJ3PXLVDL with PID 661 (started by aswin.k.raghuraman in /Users/aswin.k.raghuraman/Ash/personal/app/jetbrains/SpringBoot/Cinema Room REST Service3/Cinema Room REST Service/task)
    2021-09-14 00:42:45.516  INFO 661 --- [    Test worker] cinema.Main                              : No active profile set, falling back to default profiles: default
    2021-09-14 00:42:46.756  INFO 661 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
    2021-09-14 00:42:46.766  INFO 661 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2021-09-14 00:42:46.766  INFO 661 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
    2021-09-14 00:42:46.850  INFO 661 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2021-09-14 00:42:46.850  INFO 661 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1289 ms
    2021-09-14 00:42:47.148  INFO 661 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#39;applicationTaskExecutor&#39;
    2021-09-14 00:42:47.409  INFO 661 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path &#39;/actuator&#39;
    2021-09-14 00:42:47.466  INFO 661 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path &#39;&#39;
    2021-09-14 00:42:47.480  INFO 661 --- [    Test worker] cinema.Main                              : Started Main in 2.294 seconds (JVM running for 3.025)
    2021-09-14 00:42:47.870  INFO 661 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet &#39;dispatcherServlet&#39;
    2021-09-14 00:42:47.871  INFO 661 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet &#39;dispatcherServlet&#39;
    2021-09-14 00:42:47.881  INFO 661 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
  time: Mon, 13 Sep 2021 14:42:48 UTC
record: 2
